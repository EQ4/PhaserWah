/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginInterface.h"


//==============================================================================
PhaserWahAudioProcessor::PhaserWahAudioProcessor()
{
    for(int i = 0; i < NUM_BANDS; i++) {
        freq[i] = 200 * (i + 1);
        modfreq = 200;
        moddepth = 1;
        n[i].freq(freq[i]);
    }
}

PhaserWahAudioProcessor::~PhaserWahAudioProcessor()
{
}

//==============================================================================
const String PhaserWahAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int PhaserWahAudioProcessor::getNumParameters()
{
    return NUM_PARAMS;
}

float PhaserWahAudioProcessor::getParameter (int index)
{
    switch(index) {
    case BAND_FREQ1:
        return freq[0];
    case BAND_WIDTH1:
        return bandwidth[0];
    case BAND_FREQ2:
        return freq[1];
    case BAND_WIDTH2:
        return bandwidth[1];
    case BAND_FREQ3:
        return freq[2];
    case BAND_WIDTH3:
        return bandwidth[2];
    case BAND_FREQ4:
        return freq[3];
    case BAND_WIDTH4:
        return bandwidth[3];
    case MOD_DEPTH:
        return moddepth;
    case MOD_FREQ:
        return modfreq;
    case MIX:
        return mix;
    }

    return 0.0f;
}

void PhaserWahAudioProcessor::setParameter (int index, float newValue)
{
    PARAMS p = (PARAMS) index;
    switch(p) {
    case BAND_FREQ1:
        freq[0] = newValue;
        break;
    case BAND_WIDTH1:
        bandwidth[0] = newValue;
        n[0].width(newValue*freq[0]);
        break;
    case BAND_FREQ2:
        freq[1] = newValue;
        break;
    case BAND_WIDTH2:
        bandwidth[1] = newValue;
        n[1].width(newValue*freq[1]);
        break;
    case BAND_FREQ3:
        freq[2] = newValue;
        break;
    case BAND_WIDTH3:
        bandwidth[2] = newValue;
        n[2].width(newValue*freq[2]);
        break;
    case BAND_FREQ4:
        freq[3] = newValue;
        break;
    case BAND_WIDTH4:
        bandwidth[3] = newValue;
        n[3].width(newValue*freq[3]);
        break;
    case MOD_DEPTH:
        moddepth = newValue;
        break;
    case MOD_FREQ:
        modfreq = newValue;
        break;
    case MIX:
        mix = newValue;
        break;
    }
}

const String PhaserWahAudioProcessor::getParameterName (int index)
{
    String name;
    switch(index) {
    case BAND_FREQ1:
        name = "Freq1";
        break;
    case BAND_WIDTH1:
        name = "Width1";
        break;
    case BAND_FREQ2:
        name = "Freq2";
        break;
    case BAND_WIDTH2:
        name = "Width2";
        break;
    case BAND_FREQ3:
        name = "Freq3";
        break;
    case BAND_WIDTH3:
        name = "Width3";
        break;
    case BAND_FREQ4:
        name = "Freq4";
        break;
    case BAND_WIDTH4:
        name = "Width4";
        break;
    case MOD_DEPTH:
        name = "Modulation depth";
    case MOD_FREQ:
        name = "Modulation depth";
        break;
    case MIX:
        name = "Mix";
        break;
    }
    return name;
}

const String PhaserWahAudioProcessor::getParameterText (int index)
{
    String name;
    switch(index) {
    case BAND_FREQ1:
        name = String(freq[0]);
        break;
    case BAND_WIDTH1:
        name = String(bandwidth[0]);
        break;
    case BAND_FREQ2:
        name = String(freq[1]);
        break;
    case BAND_WIDTH2:
        name = String(bandwidth[1]);
        break;
    case BAND_FREQ3:
        name = String(freq[2]);
        break;
    case BAND_WIDTH3:
        name = String(bandwidth[2]);
        break;
    case BAND_FREQ4:
        name = String(freq[3]);
        break;
    case BAND_WIDTH4:
        name = String(bandwidth[3]);
        break;
    case MOD_DEPTH:
        name = String(moddepth);
        break;
    case MOD_FREQ:
        name = String(modfreq);
        break;
    case MIX:
        name = String(mix);
        break;
    }
    return name;
}

const String PhaserWahAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String PhaserWahAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool PhaserWahAudioProcessor::isInputChannelStereoPair (int index) const
{
    return false;
}

bool PhaserWahAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return false;
}

bool PhaserWahAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool PhaserWahAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool PhaserWahAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double PhaserWahAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int PhaserWahAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int PhaserWahAudioProcessor::getCurrentProgram()
{
    return 0;
}

void PhaserWahAudioProcessor::setCurrentProgram (int index)
{
}

const String PhaserWahAudioProcessor::getProgramName (int index)
{
    return String();
}

void PhaserWahAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void PhaserWahAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    Domain::master().spu(sampleRate);
    modulator.freq(modfreq);
}

void PhaserWahAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void PhaserWahAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        float* outbuf = buffer.getWritePointer (channel);
        const float* inbuf = buffer.getReadPointer (channel);
        modulator.freq(modfreq);
        float modsamp = modulator();

        for (int samp = 0; samp < buffer.getNumSamples(); samp++) {
            float filtered = 0;
            for (int i = 0; i < NUM_BANDS; i++) {
                n[i].freq(freq[i] * (1 + modsamp * moddepth)); //set freq for each filter
                filtered += n[i](*inbuf);
            }
            *outbuf++ = (mix * filtered) + (1 - mix) * *inbuf++;
        }
    }
}

//==============================================================================
bool PhaserWahAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* PhaserWahAudioProcessor::createEditor()
{
    return new PluginInterface(*this);
}

//==============================================================================
void PhaserWahAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void PhaserWahAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new PhaserWahAudioProcessor();
}
